// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct ToNativeParams {
  var message: String
  var times: Int64

  static func fromList(_ list: [Any?]) -> ToNativeParams? {
    let message = list[0] as! String
    let times = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)

    return ToNativeParams(
      message: message,
      times: times
    )
  }
  func toList() -> [Any?] {
    return [
      message,
      times,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ToFlutterParams {
  var message: String
  var batteryLevel: Double

  static func fromList(_ list: [Any?]) -> ToFlutterParams? {
    let message = list[0] as! String
    let batteryLevel = list[1] as! Double

    return ToFlutterParams(
      message: message,
      batteryLevel: batteryLevel
    )
  }
  func toList() -> [Any?] {
    return [
      message,
      batteryLevel,
    ]
  }
}

private class TestNativeApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return ToFlutterParams.fromList(self.readValue() as! [Any?])
    case 129:
      return ToNativeParams.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class TestNativeApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ToFlutterParams {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ToNativeParams {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class TestNativeApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return TestNativeApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return TestNativeApiCodecWriter(data: data)
  }
}

class TestNativeApiCodec: FlutterStandardMessageCodec {
  static let shared = TestNativeApiCodec(readerWriter: TestNativeApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol TestNativeApi {
  func sendMessage(params: ToNativeParams, completion: @escaping (Result<ToFlutterParams, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class TestNativeApiSetup {
  /// The codec used by TestNativeApi.
  static var codec: FlutterStandardMessageCodec { TestNativeApiCodec.shared }
  /// Sets up an instance of `TestNativeApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: TestNativeApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let sendMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_practice.TestNativeApi.sendMessage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sendMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paramsArg = args[0] as! ToNativeParams
        api.sendMessage(params: paramsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      sendMessageChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol TestFlutterApiProtocol {
  func onGotBatteryLevel(batteryLevel batteryLevelArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class TestFlutterApi: TestFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  func onGotBatteryLevel(batteryLevel batteryLevelArg: Double, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_practice.TestFlutterApi.onGotBatteryLevel\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger)
    channel.sendMessage([batteryLevelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
